{
 "add_total_row": 1, 
 "creation": "2022-09-01 12:49:07.528251", 
 "disable_prepared_report": 0, 
 "disabled": 0, 
 "docstatus": 0, 
 "doctype": "Report", 
 "idx": 0, 
 "is_standard": "Yes", 
 "letter_head": "SB LETTER HEAD 1", 
 "modified": "2022-09-29 12:34:28.429670", 
 "modified_by": "Administrator", 
 "module": "Reports", 
 "name": "Analysis Report - 4", 
 "owner": "Administrator", 
 "prepared_report": 0, 
 "query": "select supplier                                   as \"Supplier:Data:200\",\n        item_code                                  as \"Item Code:Data:150\",\n        item_name                                  as \"Item Name:320\",\n        warehouse                                  as \"Warehouse:Data:150\",\n        IF(sync_flag = \"1\", \"Enabled\", \"Disabled\") as \"Item Status:Data:200\",\n        sales                                      as \"Net Sales:Currency:100\",\n        case when sold_qty + delivered_qty = 0\n          then cogs\n          else\n            (sold_qty * (cogs/-(delivered_qty)))\n          end                                      as \"COGS:Currency:100\",\n       case when sold_qty + delivered_qty = 0\n          then sales - cogs\n          else\n            sales - (sold_qty * (cogs/-(delivered_qty)))\n          end                                      as \"Profit:Currency:100\",\n       case when sold_qty + delivered_qty = 0\n          then ((sales - cogs) / sales) * 100 \n          else\n            ((sales - (sold_qty * (cogs/-(delivered_qty)))) / sales) * 100\n         end                                       as \"Profit Percent:Percent:100\",\n        sold_qty                                   as \"Sold Qty:Int:100\",\n        delivered_qty                              as \"Delivered Qty:Int:100\",\n        actual_qty                                 as \"Bal Qty:Int:100\",\n        (sales / ifnull(sold_qty, 1))                   as \"AVG SP:Float:100\",\n\tcase when sold_qty + delivered_qty = 0\n          then (cogs / ifnull(sold_qty, 1)) \n          else\n           ( (sold_qty * (cogs/-(delivered_qty))) / ifnull(sold_qty, 1)) \n          end                                      \n                          as \"AVG Cost:Float:100\",\n        cl_1                                       as \"CL 1:Data:100\",\n        cl_2                                       as \"CL 2:Data:100\"\n from (select result.item_code,\n              result.item_name,\n              result.sales,\n              result.pos_cogs + result.dn_cogs + closed_cogs + return_cogs as cogs,\n              result.qty as sold_qty,\n              result.pos_qty + result.dn_qty + result.closed_qty + result.return_qty as delivered_qty,\n              result.actual_qty,\n              result.sync_flag,\n              result.warehouse,\n              cl_1,\n              cl_2,\n              supplier\n       from (select ite.item_code                                                       as item_code,\n                    ite.item_name                                                       as item_name,\n                    sup.supplier,\n                    ite.sync_flag,\n                    sales_full.qty,\n                    bin.actual_qty,\n                    bin.warehouse,\n                    sales_full.sales,\n                    ite.cl_1,\n                    ite.cl_2,\n                    case when cogs_pos.cogs is null then 0 else cogs_pos.cogs end       as pos_cogs,\n                    case when cogs_dn.cogs is null then 0 else cogs_dn.cogs end         as dn_cogs,\n                    case when cogs_closed.cogs is null then 0 else cogs_closed.cogs end as closed_cogs,\n                    case when cogs_return.cogs is null then 0 else cogs_return.cogs end as return_cogs,\n                    case when cogs_pos.qty is null then 0 else cogs_pos.qty end       as pos_qty,\n                    case when cogs_dn.qty is null then 0 else cogs_dn.qty end         as dn_qty,\n                    case when cogs_closed.qty is null then 0 else cogs_closed.qty end as closed_qty,\n                    case when cogs_return.qty is null then 0 else cogs_return.qty end as return_qty\n             from `tabItem` as ite\n                    left outer join tabBin as bin on ite.item_code = bin.item_code\n                    left outer join `tabItem Supplier` as sup on sup.parent = ite.item_code\n                    left outer join (select sum(sii.amount) as sales,\n                                            sii.item_code,\n                                            sii.warehouse,\n                                            sum(stock_qty)  as qty\n                                     from `tabGL Entry` as gle\n                                            inner join `tabSales Invoice` as si on si.name = gle.voucher_no\n                                            inner join `tabSales Invoice Item` as sii on sii.parent = si.name\n                                     where gle.posting_date between %(from_date)s and %(to_date)s and account = 'SALES ACCOUNT - SB' and sii.income_account = 'SALES ACCOUNT - SB'\n                                     group by sii.item_code, sii.warehouse) as sales_full\n                                    on sales_full.item_code = bin.item_code and bin.warehouse = sales_full.warehouse\n                    left outer join (select sle.item_code,\n                                            sle.warehouse,\n                                            -sum(sle.stock_value_difference) as cogs,\n                                            sum(actual_qty)                  as qty\n                                     from `tabStock Ledger Entry` as sle\n                                     where voucher_no in (select distinct(sii.parent)\n                                                          from `tabGL Entry` as gle\n                                                                 inner join `tabSales Invoice Item` as sii on sii.parent = gle.voucher_no\n                                                          where voucher_no in (select distinct(si.name) as sales\n                                                                               from `tabGL Entry` as gle\n                                                                                      inner join `tabSales Invoice` as si\n                                                                                                 on si.name = gle.voucher_no and si.update_stock = 1\n                                                                               where gle.posting_date between %(from_date)s and %(to_date)s and account = 'SALES ACCOUNT - SB')\n                                                            and account = 'COST OF SALES - SB'\n                                                            and sii.income_account = 'SALES ACCOUNT - SB')\n                                       and is_cancelled = 'No'\n                                     group by sle.item_code, sle.warehouse) as cogs_pos\n                                    on cogs_pos.item_code = bin.item_code and cogs_pos.warehouse = bin.warehouse\n                    left outer join (select sle.item_code,\n                                            -sum(sle.stock_value_difference) as cogs,\n                                            sle.warehouse,\n                                            sum(actual_qty)                  as qty\n                                     from `tabStock Ledger Entry` as sle\n                                     where voucher_no in (select distinct(dni.parent)\n                                                          from `tabGL Entry` as gle\n                                                                 inner join `tabDelivery Note Item` as dni on dni.parent = gle.voucher_no\n                                                          where\n                                                              voucher_no in (select distinct(sii.delivery_note) as sales\n                                                                             from `tabGL Entry` as gle\n                                                                                    inner join `tabSales Invoice` as si\n                                                                                               on si.name = gle.voucher_no and si.update_stock = 0 and si.docstatus = 1\n                                                                                    inner join `tabSales Invoice Item` as sii on sii.parent = si.name\n                                                                             where gle.posting_date between %(from_date)s and %(to_date)s and account = 'SALES ACCOUNT - SB')\n                                                            and account = 'COST OF SALES - SB')\n                                       and is_cancelled = 'No'\n                                     group by sle.item_code, sle.warehouse) as cogs_dn\n                                    on cogs_dn.item_code = bin.item_code and cogs_dn.warehouse = bin.warehouse\n                    left outer join (select sle.item_code,\n                                            -sum(sle.stock_value_difference) as cogs,\n                                            sle.warehouse,\n                                            sum(actual_qty)                  as qty\n                                     from `tabStock Ledger Entry` as sle\n                                     where voucher_no in (select distinct(dni.parent)\n                                                          from `tabGL Entry` as gle\n                                                                 inner join `tabDelivery Note Item` as dni on dni.parent = gle.voucher_no\n                                                          where voucher_no in (select distinct(dn.name)\n                                                                               from `tabDelivery Note` as dn\n                                                                                      left outer join `tabSales Invoice Item` as sii on sii.delivery_note = dn.name\n                                                                               where sii.delivery_note is null\n                                                                                 and dn.posting_date between %(from_date)s\n                                                                                 and %(to_date)s\n                                                                                 and dn.docstatus = 1\n                                                                                 and dn.is_return = 1)\n                                                            and account = 'COST OF SALES - SB')\n                                       and is_cancelled = 'No'\n                                     group by sle.item_code, sle.warehouse) as cogs_return\n                                    on cogs_return.item_code = bin.item_code and cogs_return.warehouse = bin.warehouse\n                    left outer join (select sle.item_code,\n                                            -sum(sle.stock_value_difference) as cogs,\n                                            sle.warehouse,\n                                            sum(actual_qty)                  as qty\n                                     from `tabStock Ledger Entry` as sle\n                                     where voucher_no in (select distinct(dni.parent)\n                                                          from `tabGL Entry` as gle\n                                                                 inner join `tabDelivery Note Item` as dni on dni.parent = gle.voucher_no\n                                                          where voucher_no in (select distinct(dn.name)\n                                                                               from `tabDelivery Note` as dn\n                                                                                      left outer join `tabSales Invoice Item` as sii on sii.delivery_note = dn.name\n                                                                               where sii.delivery_note is null\n                                                                                 and dn.posting_date between %(from_date)s\n                                                                                 and %(to_date)s\n                                                                                 and dn.docstatus = 1\n                                                                                 and dn.is_return = 0\n                                                                                 and (status = 'Closed' or status = 'Completed'))\n                                                            and account = 'COST OF SALES - SB')\n                                       and is_cancelled = 'No'\n                                     group by sle.item_code, sle.warehouse) as cogs_closed\n                                    on cogs_closed.item_code = bin.item_code and\n                                       cogs_closed.warehouse = bin.warehouse) as result) as a\n where cogs <> 0\n   and sales is not null\n   and sales != ''", 
 "ref_doctype": "Sales Invoice", 
 "report_name": "Analysis Report - 4", 
 "report_type": "Query Report", 
 "roles": [
  {
   "role": "Accounts User"
  }, 
  {
   "role": "Accounts Manager"
  }, 
  {
   "role": "STORE"
  }, 
  {
   "role": "POS - COUNTER"
  }, 
  {
   "role": "POS"
  }, 
  {
   "role": "FINANCE - MGMT."
  }, 
  {
   "role": "BASIC PERMISSIONS FOR ENTRIES & REPORTS"
  }
 ]
}